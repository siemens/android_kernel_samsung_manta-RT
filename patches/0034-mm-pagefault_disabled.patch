From 1f3234130b55689a1dec7b30d46802c89c4a7d35 Mon Sep 17 00:00:00 2001
From: Peter Zijlstra <a.p.zijlstra@chello.nl>
Date: Thu, 11 Aug 2011 15:31:31 +0200
Subject: [PATCH 034/288] mm: pagefault_disabled()

Wrap the test for pagefault_disabled() into a helper, this allows us
to remove the need for current->pagefault_disabled on !-rt kernels.

Signed-off-by: Peter Zijlstra <a.p.zijlstra@chello.nl>
Link: http://lkml.kernel.org/n/tip-3yy517m8zsi9fpsf14xfaqkw@git.kernel.org
---
 arch/alpha/mm/fault.c      |    2 +-
 arch/arm/mm/fault.c        |    2 +-
 arch/avr32/mm/fault.c      |    3 +--
 arch/cris/mm/fault.c       |    2 +-
 arch/frv/mm/fault.c        |    2 +-
 arch/ia64/mm/fault.c       |    2 +-
 arch/m32r/mm/fault.c       |    2 +-
 arch/m68k/mm/fault.c       |    2 +-
 arch/microblaze/mm/fault.c |    2 +-
 arch/mips/mm/fault.c       |    2 +-
 arch/mn10300/mm/fault.c    |    2 +-
 arch/parisc/mm/fault.c     |    2 +-
 arch/powerpc/mm/fault.c    |    2 +-
 arch/s390/mm/fault.c       |    6 +++---
 arch/score/mm/fault.c      |    2 +-
 arch/sh/mm/fault_32.c      |    2 +-
 arch/sparc/mm/fault_32.c   |    2 +-
 arch/sparc/mm/fault_64.c   |    2 +-
 arch/tile/mm/fault.c       |    2 +-
 arch/um/kernel/trap.c      |    2 +-
 arch/x86/mm/fault.c        |    2 +-
 arch/xtensa/mm/fault.c     |    2 +-
 include/linux/sched.h      |   14 ++++++++++++++
 kernel/fork.c              |    2 ++
 24 files changed, 40 insertions(+), 25 deletions(-)

Index: manta-kernel/arch/alpha/mm/fault.c
===================================================================
--- manta-kernel.orig/arch/alpha/mm/fault.c	2014-01-24 17:28:38.940028796 +0100
+++ manta-kernel/arch/alpha/mm/fault.c	2014-01-24 17:28:38.932028795 +0100
@@ -106,7 +106,7 @@
 
 	/* If we're in an interrupt context, or have no user context,
 	   we must not take the fault.  */
-	if (!mm || in_atomic() || current->pagefault_disabled)
+	if (!mm || pagefault_disabled())
 		goto no_context;
 
 #ifdef CONFIG_ALPHA_LARGE_VMALLOC
Index: manta-kernel/arch/arm/mm/fault.c
===================================================================
--- manta-kernel.orig/arch/arm/mm/fault.c	2014-01-24 17:28:38.940028796 +0100
+++ manta-kernel/arch/arm/mm/fault.c	2014-01-24 17:30:27.876033033 +0100
@@ -279,7 +279,7 @@
 	 * If we're in an interrupt, or have no irqs, or have no user
 	 * context, we must not take the fault..
 	 */
-	if (in_atomic() || irqs_disabled() || current->pagefault_disabled || !mm)
+	if (irqs_disabled() || pagefault_disabled() || !mm)
 		goto no_context;
 
 	/*
Index: manta-kernel/arch/avr32/mm/fault.c
===================================================================
--- manta-kernel.orig/arch/avr32/mm/fault.c	2014-01-24 17:28:38.940028796 +0100
+++ manta-kernel/arch/avr32/mm/fault.c	2014-01-24 17:28:38.932028795 +0100
@@ -81,8 +81,7 @@
 	 * If we're in an interrupt or have no user context, we must
 	 * not take the fault...
 	 */
-	if (in_atomic() || !mm || regs->sr & SYSREG_BIT(GM) ||
-	    current->pagefault_disabled)
+	if (!mm || regs->sr & SYSREG_BIT(GM) || pagefault_disabled())
 		goto no_context;
 
 	local_irq_enable();
Index: manta-kernel/arch/cris/mm/fault.c
===================================================================
--- manta-kernel.orig/arch/cris/mm/fault.c	2014-01-24 17:28:38.940028796 +0100
+++ manta-kernel/arch/cris/mm/fault.c	2014-01-24 17:28:38.932028795 +0100
@@ -112,7 +112,7 @@
 	 * user context, we must not take the fault.
 	 */
 
-	if (in_atomic() || !mm || current->pagefault_disabled)
+	if (!mm || pagefault_disabled())
 		goto no_context;
 
 	down_read(&mm->mmap_sem);
Index: manta-kernel/arch/frv/mm/fault.c
===================================================================
--- manta-kernel.orig/arch/frv/mm/fault.c	2014-01-24 17:28:38.940028796 +0100
+++ manta-kernel/arch/frv/mm/fault.c	2014-01-24 17:28:38.932028795 +0100
@@ -78,7 +78,7 @@
 	 * If we're in an interrupt or have no user
 	 * context, we must not take the fault..
 	 */
-	if (in_atomic() || !mm || current->pagefault_disabled)
+	if (!mm || pagefault_disabled())
 		goto no_context;
 
 	down_read(&mm->mmap_sem);
Index: manta-kernel/arch/ia64/mm/fault.c
===================================================================
--- manta-kernel.orig/arch/ia64/mm/fault.c	2014-01-24 17:28:38.940028796 +0100
+++ manta-kernel/arch/ia64/mm/fault.c	2014-01-24 17:28:38.932028795 +0100
@@ -88,7 +88,7 @@
 	/*
 	 * If we're in an interrupt or have no user context, we must not take the fault..
 	 */
-	if (in_atomic() || !mm || current->pagefault_disabled)
+	if (!mm || pagefault_disabled())
 		goto no_context;
 
 #ifdef CONFIG_VIRTUAL_MEM_MAP
Index: manta-kernel/arch/m32r/mm/fault.c
===================================================================
--- manta-kernel.orig/arch/m32r/mm/fault.c	2014-01-24 17:28:38.940028796 +0100
+++ manta-kernel/arch/m32r/mm/fault.c	2014-01-24 17:28:38.932028795 +0100
@@ -114,7 +114,7 @@
 	 * If we're in an interrupt or have no user context or are running in an
 	 * atomic region then we must not take the fault..
 	 */
-	if (in_atomic() || !mm || current->pagefault_disabled)
+	if (!mm || pagefault_disabled())
 		goto bad_area_nosemaphore;
 
 	/* When running in the kernel we expect faults to occur only to
Index: manta-kernel/arch/m68k/mm/fault.c
===================================================================
--- manta-kernel.orig/arch/m68k/mm/fault.c	2014-01-24 17:28:38.940028796 +0100
+++ manta-kernel/arch/m68k/mm/fault.c	2014-01-24 17:28:38.932028795 +0100
@@ -84,7 +84,7 @@
 	 * If we're in an interrupt or have no user
 	 * context, we must not take the fault..
 	 */
-	if (in_atomic() || !mm || current->pagefault_disabled)
+	if (!mm || pagefault_disabled())
 		goto no_context;
 
 	down_read(&mm->mmap_sem);
Index: manta-kernel/arch/microblaze/mm/fault.c
===================================================================
--- manta-kernel.orig/arch/microblaze/mm/fault.c	2014-01-24 17:28:38.940028796 +0100
+++ manta-kernel/arch/microblaze/mm/fault.c	2014-01-24 17:28:38.932028795 +0100
@@ -106,7 +106,7 @@
 	if ((error_code & 0x13) == 0x13 || (error_code & 0x11) == 0x11)
 		is_write = 0;
 
-	if (unlikely(in_atomic() || !mm || current->pagefault_disabled)) {
+	if (unlikely(!mm || pagefault_disabled())) {
 		if (kernel_mode(regs))
 			goto bad_area_nosemaphore;
 
Index: manta-kernel/arch/mips/mm/fault.c
===================================================================
--- manta-kernel.orig/arch/mips/mm/fault.c	2014-01-24 17:28:38.940028796 +0100
+++ manta-kernel/arch/mips/mm/fault.c	2014-01-24 17:28:38.932028795 +0100
@@ -89,7 +89,7 @@
 	 * If we're in an interrupt or have no user
 	 * context, we must not take the fault..
 	 */
-	if (in_atomic() || !mm || current->pagefault_disabled)
+	if (!mm || pagefault_disabled())
 		goto bad_area_nosemaphore;
 
 retry:
Index: manta-kernel/arch/mn10300/mm/fault.c
===================================================================
--- manta-kernel.orig/arch/mn10300/mm/fault.c	2014-01-24 17:28:38.940028796 +0100
+++ manta-kernel/arch/mn10300/mm/fault.c	2014-01-24 17:28:38.932028795 +0100
@@ -167,7 +167,7 @@
 	 * If we're in an interrupt or have no user
 	 * context, we must not take the fault..
 	 */
-	if (in_atomic() || !mm || current->pagefault_disabled)
+	if (!mm || pagefault_disabled())
 		goto no_context;
 
 	down_read(&mm->mmap_sem);
Index: manta-kernel/arch/parisc/mm/fault.c
===================================================================
--- manta-kernel.orig/arch/parisc/mm/fault.c	2014-01-24 17:28:38.940028796 +0100
+++ manta-kernel/arch/parisc/mm/fault.c	2014-01-24 17:28:38.932028795 +0100
@@ -176,7 +176,7 @@
 	unsigned long acc_type;
 	int fault;
 
-	if (in_atomic() || !mm || current->pagefault_disabled)
+	if (!mm || pagefault_disabled())
 		goto no_context;
 
 	down_read(&mm->mmap_sem);
Index: manta-kernel/arch/powerpc/mm/fault.c
===================================================================
--- manta-kernel.orig/arch/powerpc/mm/fault.c	2014-01-24 17:28:38.940028796 +0100
+++ manta-kernel/arch/powerpc/mm/fault.c	2014-01-24 17:28:38.932028795 +0100
@@ -261,7 +261,7 @@
 	if (!arch_irq_disabled_regs(regs))
 		local_irq_enable();
 
-	if (in_atomic() || mm == NULL || current->pagefault_disabled) {
+	if (!mm || pagefault_disabled()) {
 		if (!user_mode(regs))
 			return SIGSEGV;
 		/* in_atomic() in user mode is really bad,
Index: manta-kernel/arch/s390/mm/fault.c
===================================================================
--- manta-kernel.orig/arch/s390/mm/fault.c	2014-01-24 17:28:38.940028796 +0100
+++ manta-kernel/arch/s390/mm/fault.c	2014-01-24 17:28:38.932028795 +0100
@@ -283,8 +283,8 @@
 	 * user context.
 	 */
 	fault = VM_FAULT_BADCONTEXT;
-	if (unlikely(!user_space_fault(trans_exc_code) || in_atomic() || !mm ||
-		    tsk->pagefault_disabled))
+	if (unlikely(!user_space_fault(trans_exc_code) ||
+		     !mm || pagefault_disabled()))
 		goto out;
 
 	address = trans_exc_code & __FAIL_ADDR_MASK;
@@ -417,7 +417,7 @@
 
 	trans_exc_code = regs->int_parm_long;
 	if (unlikely(!user_space_fault(trans_exc_code) || in_atomic() || !mm ||
-		    current->pagefault_disabled))
+		     pagefault_disabled()))
 		goto no_context;
 
 	down_read(&mm->mmap_sem);
Index: manta-kernel/arch/score/mm/fault.c
===================================================================
--- manta-kernel.orig/arch/score/mm/fault.c	2014-01-24 17:28:38.940028796 +0100
+++ manta-kernel/arch/score/mm/fault.c	2014-01-24 17:28:38.932028795 +0100
@@ -72,7 +72,7 @@
 	* If we're in an interrupt or have no user
 	* context, we must not take the fault..
 	*/
-	if (in_atomic() || !mm || current->pagefault_disabled)
+	if (!mm || pagefault_disabled())
 		goto bad_area_nosemaphore;
 
 	down_read(&mm->mmap_sem);
Index: manta-kernel/arch/sh/mm/fault_32.c
===================================================================
--- manta-kernel.orig/arch/sh/mm/fault_32.c	2014-01-24 17:28:38.940028796 +0100
+++ manta-kernel/arch/sh/mm/fault_32.c	2014-01-24 17:28:38.932028795 +0100
@@ -166,7 +166,7 @@
 	 * If we're in an interrupt, have no user context or are running
 	 * in an atomic region then we must not take the fault:
 	 */
-	if (in_atomic() || !mm || current->pagefault_disabled)
+	if (!mm || pagefault_disabled())
 		goto no_context;
 
 	down_read(&mm->mmap_sem);
Index: manta-kernel/arch/sparc/mm/fault_32.c
===================================================================
--- manta-kernel.orig/arch/sparc/mm/fault_32.c	2014-01-24 17:28:38.940028796 +0100
+++ manta-kernel/arch/sparc/mm/fault_32.c	2014-01-24 17:28:38.932028795 +0100
@@ -248,7 +248,7 @@
 	 * If we're in an interrupt or have no user
 	 * context, we must not take the fault..
 	 */
-	if (in_atomic() || !mm || current->pagefault_disabled)
+	if (!mm || pagefault_disabled())
 		goto no_context;
 
 	perf_sw_event(PERF_COUNT_SW_PAGE_FAULTS, 1, regs, address);
Index: manta-kernel/arch/sparc/mm/fault_64.c
===================================================================
--- manta-kernel.orig/arch/sparc/mm/fault_64.c	2014-01-24 17:28:38.940028796 +0100
+++ manta-kernel/arch/sparc/mm/fault_64.c	2014-01-24 17:28:38.932028795 +0100
@@ -323,7 +323,7 @@
 	 * If we're in an interrupt or have no user
 	 * context, we must not take the fault..
 	 */
-	if (in_atomic() || !mm || current->pagefault_enabled)
+	if (!mm || pagefault_disabled())
 		goto intr_or_no_mm;
 
 	perf_sw_event(PERF_COUNT_SW_PAGE_FAULTS, 1, regs, address);
Index: manta-kernel/arch/tile/mm/fault.c
===================================================================
--- manta-kernel.orig/arch/tile/mm/fault.c	2014-01-24 17:28:38.940028796 +0100
+++ manta-kernel/arch/tile/mm/fault.c	2014-01-24 17:28:38.932028795 +0100
@@ -355,7 +355,7 @@
 	 * If we're in an interrupt, have no user context or are running in an
 	 * atomic region then we must not take the fault.
 	 */
-	if (in_atomic() || !mm || current->pagefault_disabled) {
+	if (!mm || pagefault_disabled()) {
 		vma = NULL;  /* happy compiler */
 		goto bad_area_nosemaphore;
 	}
Index: manta-kernel/arch/um/kernel/trap.c
===================================================================
--- manta-kernel.orig/arch/um/kernel/trap.c	2014-01-24 17:28:38.940028796 +0100
+++ manta-kernel/arch/um/kernel/trap.c	2014-01-24 17:28:38.932028795 +0100
@@ -37,7 +37,7 @@
 	 * If the fault was during atomic operation, don't take the fault, just
 	 * fail.
 	 */
-	if (in_atomic() || !mm || current->pagefault_disabled)
+	if (!mm || pagefault_disabled())
 		goto out_nosemaphore;
 
 	down_read(&mm->mmap_sem);
Index: manta-kernel/arch/x86/mm/fault.c
===================================================================
--- manta-kernel.orig/arch/x86/mm/fault.c	2014-01-24 17:28:38.940028796 +0100
+++ manta-kernel/arch/x86/mm/fault.c	2014-01-24 17:28:38.932028795 +0100
@@ -1096,7 +1096,7 @@
 	 * If we're in an interrupt, have no user context or are running
 	 * in an atomic region then we must not take the fault:
 	 */
-	if (unlikely(in_atomic() || !mm || current->pagefault_disabled)) {
+	if (unlikely(!mm || pagefault_disabled())) {
 		bad_area_nosemaphore(regs, error_code, address);
 		return;
 	}
Index: manta-kernel/arch/xtensa/mm/fault.c
===================================================================
--- manta-kernel.orig/arch/xtensa/mm/fault.c	2014-01-24 17:28:38.940028796 +0100
+++ manta-kernel/arch/xtensa/mm/fault.c	2014-01-24 17:28:38.932028795 +0100
@@ -56,7 +56,7 @@
 	/* If we're in an interrupt or have no user
 	 * context, we must not take the fault..
 	 */
-	if (in_atomic() || !mm || current->pagefault_disabled) {
+	if (!mm || pagefault_disabled()) {
 		bad_page_fault(regs, address, SIGSEGV);
 		return;
 	}
Index: manta-kernel/include/linux/sched.h
===================================================================
--- manta-kernel.orig/include/linux/sched.h	2014-01-24 17:28:38.940028796 +0100
+++ manta-kernel/include/linux/sched.h	2014-01-24 17:28:38.932028795 +0100
@@ -90,6 +90,7 @@
 #include <linux/latencytop.h>
 #include <linux/cred.h>
 #include <linux/llist.h>
+#include <linux/hardirq.h>
 
 #include <asm/processor.h>
 
@@ -1483,7 +1484,9 @@
 	/* mutex deadlock detection */
 	struct mutex_waiter *blocked_on;
 #endif
+#ifdef CONFIG_PREEMPT_RT_FULL
 	int pagefault_disabled;
+#endif
 #ifdef CONFIG_TRACE_IRQFLAGS
 	unsigned int irq_events;
 	unsigned long hardirq_enable_ip;
@@ -1633,6 +1636,17 @@
 /* Future-safe accessor for struct task_struct's cpus_allowed. */
 #define tsk_cpus_allowed(tsk) (&(tsk)->cpus_allowed)
 
+#ifdef CONFIG_PREEMPT_RT_FULL
+static inline bool cur_pf_disabled(void) { return current->pagefault_disabled; }
+#else
+static inline bool cur_pf_disabled(void) { return false; }
+#endif
+
+static inline bool pagefault_disabled(void)
+{
+	return in_atomic() || cur_pf_disabled();
+}
+
 /*
  * Priority of a process goes from 0..MAX_PRIO-1, valid RT
  * priority is 0..MAX_RT_PRIO-1, and SCHED_NORMAL/SCHED_BATCH
Index: manta-kernel/kernel/fork.c
===================================================================
--- manta-kernel.orig/kernel/fork.c	2014-01-24 17:28:38.940028796 +0100
+++ manta-kernel/kernel/fork.c	2014-01-24 17:28:38.932028795 +0100
@@ -1285,7 +1285,9 @@
 	p->hardirq_context = 0;
 	p->softirq_context = 0;
 #endif
+#ifdef CONFIG_PREEMPT_RT_FULL
 	p->pagefault_disabled = 0;
+#endif
 #ifdef CONFIG_LOCKDEP
 	p->lockdep_depth = 0; /* no locks held yet */
 	p->curr_chain_key = 0;
